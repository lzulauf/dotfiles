export VIRTUAL_ENV_DISABLE_PROMPT=1

######################
# Virtualenv Functions
######################

function activate() {
  virtualenv_name=$1
  if [[ -z ${virtualenv_name} ]]; then

    # If pipenv is installed, see if we can use it to find a virtualenv
    if hash pipenv 2>/dev/null; then
      # Assume there's a pipenv available
      pipenv_venv="$(pipenv --venv 2>/dev/null)"
      if [ $? = 0 ]; then
        echo "Using pipenv venv ${pipenv_venv}"
        source ${pipenv_venv}/bin/activate
        return 0
      fi
    fi

    # If poetry is installed, see if we can use it to find a virtualenv
    if hash poetry 2>/dev/null; then
      # Poetry does not have an easy way to access the version without parsing.
      # The output of poetry show -v is many lines, but the first line looks
      # like:
      # Using virtualenv: /Users/luke/Library/Caches/pypoetry/virtualenvs/bgc-program-tracking-D6tnnA03-py3.10
      # If we run the output directly through head, head will close the pipe
      # while it is still being written to. If, on the other hand, we have tail
      # read the full pipe and then pass the output to head, tail will not
      # complain about the pipe being closed.
      # We can then extract the first line, cut on spaces, and retrieve the
      # third "word" (the path). This will fail if any spaces exist in the path
      # name, th ough.
      poetry_output="$(poetry show -v)"
      if [ $? = 0 ]; then
        poetry_venv="$(echo $poetry_output | head -n 1 | cut -d ' ' -f 3)"
        echo "Using poetry venv ${poetry_venv}"
        source ${poetry_venv}/bin/activate
        return 0
      fi
    fi

  fi

  virtualenv_dir=~/.virtualenvs
  if [[ -n ${VIRTUALENV_DIR+x} ]]; then
    virtualenv_dir=$VIRTUALENV_DIR
  fi
  # Support direct paths
  if [[ -d $virtualenv_name ]]; then
    source $virtualenv_name/bin/activate
  # Fall back to virtualenv dir
  elif [[ -d $virtualenv_dir/$virtualenv_name ]]; then
    source $virtualenv_dir/$virtualenv_name/bin/activate
  else
    >&2 echo "Directory $virtualenv_dir/$virtualenv_name does not exist"
    return 1
  fi
}


function enable_global_site_directory() {
  if [[ -z ${VIRTUAL_ENV} ]]; then
    >&2 echo "A virtualenv must be active"
    return 1
  fi

  if [[ -f $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt ]]; then
    rm $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt
  fi
}

function disable_global_site_directory() {
  if [[ -z ${VIRTUAL_ENV} ]]; then
    >&2 echo "A virtualenv must be active"
    return 1
  fi

  touch $VIRTUAL_ENV/lib/python2.7/no-global-site-packages.txt
}

function ipython() {
  site_dir=$(python -c "import site; print(next(iter(site.getsitepackages()), ''))")
  PREFIX=""
  if [[ -n $site_dir && -d $site_dir ]]; then
      PREFIX=$site_dir
  fi
  PYTHONPATH=$PREFIX /usr/bin/env ipython
}

# zsh chpwd hook
# Automatically activate the virtualenv environment named in the .venv file
# when you change directories
# Does not work in bash, though you could try setting it as your prompt command
# PROMPT_COMMAND=chpwd
function chpwd() {
  if [[ -f ".venv" ]]; then
    activate `cat .venv`
  fi
}
